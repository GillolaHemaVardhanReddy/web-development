REDUX TOOLKIT REDUX_THUNK
creating async actions in redux toolkit 

lets say this is user feature
1. import createSlice
********* to create thunk async actions redux toolkit provides createAsyncThink *************
  const createSlice = require('@redux/toolkit').createSlice()
  const createAsyncThunk = require('@redux/toolkit').createAsyncThunk
  const axios = require('axios')
2. create initialState
  const initialState = {
    loading : false,
    user : [],
    error: '',
  }

3. create async Thunk or async action
const fetchUSer = createAsyncThunk('user/fetchusers',()=>{ // createAsyncThunk takes in 2 variables they are 1. actionName 2. callback to create payload
    return axios.get('ApiUrl')
})
we dont need any try catch as error will be handled by asyncThunk
here is special feature of createAsyncThunk :
it will automatically dispatch lifecycle actions based on returned promise
a promise is either pending or fulfilled or rejected
so createAsyncThunk creates pending / fulfilled / rejected action types
-----> we can listen to these with a reducer function and perform necessary state transitions the "reducers are not generated by slice though and must be added as extraReducers"
4. create userSlice
const userSlice = createSlice({
  name: 'user',
  initialState, // as we have the keyname and value name same initialState we can just pass initialState
  extraReducers: builder =>{
    builder.addCase(fetchusers.pending, state => { // payload is optional
      state.loading = true;
    })
    builder.addCase(fetchusrs.fulfilled, (state,payload) => { // payload is imp as it catches the response from axios as this is the callback 
      state.loading = false;
      state.users = action.payload
    })
    builder.addCase(fetchusers.rejected, (state,payload)=>{   // payload is imp as it catches the response from axios as this is the callback 
      state.loading = false;
      state.users = [];
      state.users = action.error.message
    })
  }

5. export both async-action/async function we created and reducer itself
  module.exports = userSlice.reducer  // default export
  module.exports.fetchUSers = fetchusers // named export
})

not in app.js   we can just import fetchUsers and dispatch it 
store.dispatch(fetchUsers())
